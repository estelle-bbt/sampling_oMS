}
get_ttt_effect_id(data_sem_sampled_sessions,"diff_q")
#' Project builder
## Install Dependencies (listed in DESCRIPTION) ----
remotes::install_deps(upgrade = "never")
## Run Project ----
targets::tar_make()
#' Project builder
## Install Dependencies (listed in DESCRIPTION) ----
remotes::install_deps(upgrade = "never")
## Run Project ----
targets::tar_make()
#' Project builder
## Install Dependencies (listed in DESCRIPTION) ----
remotes::install_deps(upgrade = "never")
## Run Project ----
targets::tar_make()
#' Project builder
## Install Dependencies (listed in DESCRIPTION) ----
remotes::install_deps(upgrade = "never")
## Run Project ----
targets::tar_make()
targets::tar_load(data_flower)
data_flower$nb_seeds
data_flower$nb_visit
#' Project builder
## Install Dependencies (listed in DESCRIPTION) ----
remotes::install_deps(upgrade = "never")
## Run Project ----
targets::tar_make()
#' Project builder
## Install Dependencies (listed in DESCRIPTION) ----
remotes::install_deps(upgrade = "never")
## Run Project ----
targets::tar_make()
#' Project builder
## Install Dependencies (listed in DESCRIPTION) ----
remotes::install_deps(upgrade = "never")
## Run Project ----
targets::tar_make()
#' Project builder
## Install Dependencies (listed in DESCRIPTION) ----
remotes::install_deps(upgrade = "never")
## Run Project ----
targets::tar_make()
#' Project builder
## Install Dependencies (listed in DESCRIPTION) ----
remotes::install_deps(upgrade = "never")
## Run Project ----
targets::tar_make()
targets::tar_load(data_sem_sampled_sessions)
color <- case_when(target_ttt == "low" ~ "#43C59E",
target_ttt == "medium" ~ "#3D7068",
target_ttt == "high" ~ "#14453D")
library(tidyverse)
color <- case_when(target_ttt == "low" ~ "#43C59E",
target_ttt == "medium" ~ "#3D7068",
target_ttt == "high" ~ "#14453D")
target_ttt = "low"
arget_sex = "mal"
target_sr = "r_sr_all"
target_ps = "r_mean_ps"
target_traits = c("r_nb_flo_open","r_height_mean")
x_coord = c(1.5,2.5,2,1,3), y_coord = c(2,2,4,1,1)
x_coord = c(1.5,2.5,2,1,3)
y_coord = c(2,2,4,1,1)
color <- case_when(target_ttt == "low" ~ "#43C59E",
target_ttt == "medium" ~ "#3D7068",
target_ttt == "high" ~ "#14453D")
data_target <- data_sem_sampled_sessions |>
filter(ttt == target_ttt & sex == target_sex)
target_sex = "mal"
color <- case_when(target_ttt == "low" ~ "#43C59E",
target_ttt == "medium" ~ "#3D7068",
target_ttt == "high" ~ "#14453D")
data_target <- data_sem_sampled_sessions |>
filter(ttt == target_ttt & sex == target_sex)
cor.test(data_target$r_oms,data_target$r_mean_ps)
formula1 <- reformulate(target_traits, response = "r_oms")
formula1 <- update(formula1, . ~ . + (1|session))
formula2 <- reformulate(c("r_oms", target_ps), response = target_sr)
formula2 <- update(formula2, . ~ . + (1|session))
formula3 <- reformulate(target_traits, response = target_ps)
formula3 <- update(formula3, . ~ . + (1|session))
psem_proxy <- piecewiseSEM::psem(lme4::lmer(data=data_target,formula1),
lme4::lmer(data=data_target,formula2),
lme4::lmer(data=data_target,formula3))
plot <- plot(psem_proxy,
node_attrs = data.frame(fillcolor = color,
x = x_coord, y = y_coord,
fontsize=6))
plot
y_coord = c(2,4,2,1,1)
x_coord = c(1.5,2,2.5,1,3)
color <- case_when(target_ttt == "low" ~ "#43C59E",
target_ttt == "medium" ~ "#3D7068",
target_ttt == "high" ~ "#14453D")
data_target <- data_sem_sampled_sessions |>
filter(ttt == target_ttt & sex == target_sex)
cor.test(data_target$r_oms,data_target$r_mean_ps)
formula1 <- reformulate(target_traits, response = "r_oms")
formula1 <- update(formula1, . ~ . + (1|session))
formula2 <- reformulate(c("r_oms", target_ps), response = target_sr)
formula2 <- update(formula2, . ~ . + (1|session))
formula3 <- reformulate(target_traits, response = target_ps)
formula3 <- update(formula3, . ~ . + (1|session))
psem_proxy <- piecewiseSEM::psem(lme4::lmer(data=data_target,formula1),
lme4::lmer(data=data_target,formula2),
lme4::lmer(data=data_target,formula3))
plot <- plot(psem_proxy,
node_attrs = data.frame(fillcolor = color,
x = x_coord, y = y_coord,
fontsize=6))
plot
?piecewiseSEM
str(plot)
View(str(plot))
semPaths(psem_proxy)
??semPaths
library(semPlot)
semPaths(psem_proxy)
View(plot)
plot[["x"]][["diagram"]]
plot <- plot(psem_proxy,
node_attrs = data.frame(fillcolor = color,
x = x_coord, y = y_coord,
fontsize=6),
label = c(1,2,3,4,5))
plot <- plot(psem_proxy,
node_attrs = data.frame(fillcolor = color,
x = x_coord, y = y_coord,
fontsize=6),
label = c("1","2","3","4","5"))
plot <- plot(psem_proxy,
node_attrs = data.frame(fillcolor = color,
x = x_coord, y = y_coord,
fontsize=6),
labels = c("1","2","3","4","5"))
formula3
data_sem_sampled_sessions
data_target <- data_sem_sampled_sessions |>
filter(ttt == target_ttt & sex == target_sex) |>
rename(Wout = r_sr,
W = r_sr_all,
PS = r_mean_ps,
MS = r_oms,
F = r_nb_flo)
data_target <- data_sem_sampled_sessions |>
filter(ttt == target_ttt & sex == target_sex) |>
rename(Wout = r_sr,
W = r_sr_all,
PS = r_mean_ps,
MS = r_oms,
F = r_nb_flo,
H = r_height_mean)
#' Project builder
## Install Dependencies (listed in DESCRIPTION) ----
remotes::install_deps(upgrade = "never")
## Run Project ----
targets::tar_make()
#' Project builder
## Install Dependencies (listed in DESCRIPTION) ----
remotes::install_deps(upgrade = "never")
## Run Project ----
targets::tar_make()
#' Project builder
## Install Dependencies (listed in DESCRIPTION) ----
remotes::install_deps(upgrade = "never")
## Run Project ----
targets::tar_make()
#' Project builder
## Install Dependencies (listed in DESCRIPTION) ----
remotes::install_deps(upgrade = "never")
## Run Project ----
targets::tar_make()
#' Project builder
## Install Dependencies (listed in DESCRIPTION) ----
remotes::install_deps(upgrade = "never")
## Run Project ----
targets::tar_make()
#' Project builder
## Install Dependencies (listed in DESCRIPTION) ----
remotes::install_deps(upgrade = "never")
## Run Project ----
targets::tar_make()
#' Project builder
## Install Dependencies (listed in DESCRIPTION) ----
remotes::install_deps(upgrade = "never")
## Run Project ----
targets::tar_make()
data_sem_sampled_sessions <- data_sem_sampled_session |>
mutate(plot_label = paste0(ttt, sex))
targets::tar_load(data_sem_sampled_session)
data_sem_sampled_sessions <- data_sem_sampled_session |>
mutate(plot_label = paste0(ttt, sex))
data_sem_sampled_sessions <- data_sem_sampled_sessions |>
mutate(plot_label = paste0(ttt, sex))
plot_id <- ggplot(data = data_sem_sampled_sessions, aes(x = ttt_plot, y = get(variable), fill = plot_label)) +
facet_wrap(. ~ sex) +
theme_classic() +
geom_violin() +
# geom_jitter(shape = 16, height = 0, width = 0.3, alpha = 0.05) +
scale_fill_manual(values=c("#E6AA68", "#D36135", "#9A4D1D","#43C59E","#3D7068","#14453D")) +
theme(legend.position = "none") +
xlab("Pollinator abundance treatment") +
ylab(clean_name) +
stat_summary(
fun.data = data_summary_plot,
geom = "pointrange",
shape = 21,
size = 1,
stroke = 1,
color = "black",
fill = "white"
)
clean_name <- case_when(variable == "sr_all" ~ "Total reproductive success",
variable == "sr" ~ "Outcrossed reproductive success",
variable == "oms" ~ "Observational number of mates", # Poisson
variable == "mean_ps" ~ "Fertilization post-pollination",
variable == "diff_q" ~ "Filtering post-pollination",
variable == "mean_position" ~ "Relative mean position of the plant in the visit sequence",
variable == "contact_id" ~ "Number of pollinator visits to the plant", # Poisson
variable == "dur_per_visit" ~ "Average visit duration",
variable == "nb_visits_per_flower" ~ "Average number of pollinator visits per visited flower",
variable == "nb_flower_visited" ~ "Number of distinct flowers visited on the plant", # Poisson
)
variable = "sr_all"
clean_name <- case_when(variable == "sr_all" ~ "Total reproductive success",
variable == "sr" ~ "Outcrossed reproductive success",
variable == "oms" ~ "Observational number of mates", # Poisson
variable == "mean_ps" ~ "Fertilization post-pollination",
variable == "diff_q" ~ "Filtering post-pollination",
variable == "mean_position" ~ "Relative mean position of the plant in the visit sequence",
variable == "contact_id" ~ "Number of pollinator visits to the plant", # Poisson
variable == "dur_per_visit" ~ "Average visit duration",
variable == "nb_visits_per_flower" ~ "Average number of pollinator visits per visited flower",
variable == "nb_flower_visited" ~ "Number of distinct flowers visited on the plant", # Poisson
)
plot_id <- ggplot(data = data_sem_sampled_sessions, aes(x = ttt_plot, y = get(variable), fill = plot_label)) +
facet_wrap(. ~ sex) +
theme_classic() +
geom_violin() +
# geom_jitter(shape = 16, height = 0, width = 0.3, alpha = 0.05) +
scale_fill_manual(values=c("#E6AA68", "#D36135", "#9A4D1D","#43C59E","#3D7068","#14453D")) +
theme(legend.position = "none") +
xlab("Pollinator abundance treatment") +
ylab(clean_name) +
stat_summary(
fun.data = data_summary_plot,
geom = "pointrange",
shape = 21,
size = 1,
stroke = 1,
color = "black",
fill = "white"
)
data_summary_plot <- function(x) {
m <- mean(x)
ymin <- m-sd(x)
ymax <- m+sd(x)
return(c(y=m,ymin=ymin,ymax=ymax))
}
plot_id <- ggplot(data = data_sem_sampled_sessions, aes(x = ttt_plot, y = get(variable), fill = plot_label)) +
facet_wrap(. ~ sex) +
theme_classic() +
geom_violin() +
# geom_jitter(shape = 16, height = 0, width = 0.3, alpha = 0.05) +
scale_fill_manual(values=c("#E6AA68", "#D36135", "#9A4D1D","#43C59E","#3D7068","#14453D")) +
theme(legend.position = "none") +
xlab("Pollinator abundance treatment") +
ylab(clean_name) +
stat_summary(
fun.data = data_summary_plot,
geom = "pointrange",
shape = 21,
size = 1,
stroke = 1,
color = "black",
fill = "white"
)
plot_id
plot_id <- ggplot(data = data_sem_sampled_sessions, aes(x = ttt_plot, y = get(variable), fill = plot_label)) +
facet_wrap(. ~ sex) +
theme_classic() +
geom_violin() +
# geom_jitter(shape = 16, height = 0, width = 0.3, alpha = 0.05) +
scale_fill_manual(values=c("#9A4D1D", "#D36135", "#E6AA68","#43C59E","#3D7068","#14453D")) +
theme(legend.position = "none") +
xlab("Pollinator abundance treatment") +
ylab(clean_name) +
stat_summary(
fun.data = data_summary_plot,
geom = "pointrange",
shape = 21,
size = 1,
stroke = 1,
color = "black",
fill = "white"
)
plot_id
plot_id <- ggplot(data = data_sem_sampled_sessions, aes(x = ttt_plot, y = get(variable), fill = plot_label)) +
facet_wrap(. ~ sex) +
theme_classic() +
geom_violin() +
# geom_jitter(shape = 16, height = 0, width = 0.3, alpha = 0.05) +
scale_fill_manual(values=c("#9A4D1D", "#14453D", "#E6AA68","#43C59E","#D36135","#3D7068")) +
theme(legend.position = "none") +
xlab("Pollinator abundance treatment") +
ylab(clean_name) +
stat_summary(
fun.data = data_summary_plot,
geom = "pointrange",
shape = 21,
size = 1,
stroke = 1,
color = "black",
fill = "white"
)
plot_id
data_sem_sampled_sessions <- data_sem_sampled_sessions |>
mutate(plot_label = paste0(ttt, sex),
sex = ifelse(sex == "mal","Males","Females"))
plot_id <- ggplot(data = data_sem_sampled_sessions, aes(x = ttt_plot, y = get(variable), fill = plot_label)) +
facet_wrap(. ~ sex) +
theme_classic() +
geom_violin() +
# geom_jitter(shape = 16, height = 0, width = 0.3, alpha = 0.05) +
scale_fill_manual(values=c("#9A4D1D", "#14453D", "#E6AA68","#43C59E","#D36135","#3D7068")) +
theme(legend.position = "none") +
xlab("Pollinator abundance treatment") +
ylab(clean_name) +
stat_summary(
fun.data = data_summary_plot,
geom = "pointrange",
shape = 21,
size = 1,
stroke = 1,
color = "black",
fill = "white"
)
plot_id
variable = "oms"
data_sem_sampled_sessions <- data_sem_sampled_sessions |>
mutate(plot_label = paste0(ttt, sex),
sex = ifelse(sex == "mal","Males","Females"))
plot_id <- ggplot(data = data_sem_sampled_sessions, aes(x = ttt_plot, y = get(variable), fill = plot_label)) +
facet_wrap(. ~ sex) +
theme_classic() +
geom_violin() +
# geom_jitter(shape = 16, height = 0, width = 0.3, alpha = 0.05) +
scale_fill_manual(values=c("#9A4D1D", "#14453D", "#E6AA68","#43C59E","#D36135","#3D7068")) +
theme(legend.position = "none") +
xlab("Pollinator abundance treatment") +
ylab(clean_name) +
stat_summary(
fun.data = data_summary_plot,
geom = "pointrange",
shape = 21,
size = 1,
stroke = 1,
color = "black",
fill = "white"
}else if(variable == "mean_ps"){
plot_id <- ggplot(data = data_sem_sampled_sessions, aes(x = ttt_plot, y = get(variable), fill = plot_label)) +
facet_wrap(. ~ sex) +
theme_classic() +
geom_violin() +
# geom_jitter(shape = 16, height = 0, width = 0.3, alpha = 0.05) +
scale_fill_manual(values=c("#9A4D1D", "#14453D", "#E6AA68","#43C59E","#D36135","#3D7068")) +
theme(legend.position = "none") +
xlab("Pollinator abundance treatment") +
ylab(clean_name) +
stat_summary(
fun.data = data_summary_plot,
geom = "pointrange",
shape = 21,
size = 1,
stroke = 1,
color = "black",
fill = "white"
)
plot_id
variable = "sr_all"
plot_id <- ggplot(data = data_sem_sampled_sessions, aes(x = ttt_plot, y = get(variable), fill = plot_label)) +
facet_wrap(. ~ sex) +
theme_classic() +
geom_violin() +
# geom_jitter(shape = 16, height = 0, width = 0.3, alpha = 0.05) +
scale_fill_manual(values=c("#9A4D1D", "#14453D", "#E6AA68","#43C59E","#D36135","#3D7068")) +
theme(legend.position = "none") +
xlab("Pollinator abundance treatment") +
ylab(clean_name) +
stat_summary(
fun.data = data_summary_plot,
geom = "pointrange",
shape = 21,
size = 1,
stroke = 1,
color = "black",
fill = "white"
)
plot_id
data_sem_sampled_sessions <- data_sem_sampled_sessions |>
mutate(plot_label = paste0(ttt, sex),
sex = ifelse(sex == "mal","Males","Females"))
plot_id <- ggplot(data = data_sem_sampled_sessions, aes(x = ttt_plot, y = get(variable), fill = plot_label)) +
facet_wrap(. ~ sex) +
theme_classic() +
geom_violin() +
# geom_jitter(shape = 16, height = 0, width = 0.3, alpha = 0.05) +
scale_fill_manual(values=c("#9A4D1D", "#14453D", "#E6AA68","#43C59E","#D36135","#3D7068")) +
theme(legend.position = "none") +
xlab("Pollinator abundance treatment") +
ylab(clean_name) +
stat_summary(
fun.data = data_summary_plot,
geom = "pointrange",
shape = 21,
size = 1,
stroke = 1,
color = "black",
fill = "white"
)
plot_id
targets::tar_load(data_sem_sampled_sessions)
data_sem_sampled_sessions <- data_sem_sampled_sessions |>
mutate(plot_label = paste0(ttt, sex),
sex = ifelse(sex == "mal","Males","Females"))
plot_id <- ggplot(data = data_sem_sampled_sessions, aes(x = ttt_plot, y = get(variable), fill = plot_label)) +
facet_wrap(. ~ sex) +
theme_classic() +
geom_violin() +
# geom_jitter(shape = 16, height = 0, width = 0.3, alpha = 0.05) +
scale_fill_manual(values=c("#9A4D1D", "#14453D", "#E6AA68","#43C59E","#D36135","#3D7068")) +
theme(legend.position = "none") +
xlab("Pollinator abundance treatment") +
ylab(clean_name) +
stat_summary(
fun.data = data_summary_plot,
geom = "pointrange",
shape = 21,
size = 1,
stroke = 1,
color = "black",
fill = "white"
)
plot_id
variable = "oms"
plot_id <- ggplot(data = data_sem_sampled_sessions, aes(x = ttt_plot, y = get(variable), fill = plot_label)) +
facet_wrap(. ~ sex) +
theme_classic() +
geom_violin() +
# geom_jitter(shape = 16, height = 0, width = 0.3, alpha = 0.05) +
scale_fill_manual(values=c("#9A4D1D", "#14453D", "#E6AA68","#43C59E","#D36135","#3D7068")) +
theme(legend.position = "none") +
xlab("Pollinator abundance treatment") +
ylab(clean_name) +
stat_summary(
fun.data = data_summary_plot,
geom = "pointrange",
shape = 21,
size = 1,
stroke = 1,
color = "black",
fill = "white"
)
plot_id
clean_name <- case_when(variable == "sr_all" ~ "Total reproductive success",
variable == "sr" ~ "Outcrossed reproductive success",
variable == "oms" ~ "Observational number of mates", # Poisson
variable == "mean_ps" ~ "Fertilization post-pollination",
variable == "diff_q" ~ "Filtering post-pollination",
variable == "mean_position" ~ "Relative mean position of the plant in the visit sequence",
variable == "contact_id" ~ "Number of pollinator visits to the plant", # Poisson
variable == "dur_per_visit" ~ "Average visit duration",
variable == "nb_visits_per_flower" ~ "Average number of pollinator visits per visited flower",
variable == "nb_flower_visited" ~ "Number of distinct flowers visited on the plant", # Poisson
)
plot_id <- ggplot(data = data_sem_sampled_sessions, aes(x = ttt_plot, y = get(variable), fill = plot_label)) +
facet_wrap(. ~ sex) +
theme_classic() +
geom_violin() +
# geom_jitter(shape = 16, height = 0, width = 0.3, alpha = 0.05) +
scale_fill_manual(values=c("#9A4D1D", "#14453D", "#E6AA68","#43C59E","#D36135","#3D7068")) +
theme(legend.position = "none") +
xlab("Pollinator abundance treatment") +
ylab(clean_name) +
stat_summary(
fun.data = data_summary_plot,
geom = "pointrange",
shape = 21,
size = 1,
stroke = 1,
color = "black",
fill = "white"
)
plot_id
#' Project builder
## Install Dependencies (listed in DESCRIPTION) ----
remotes::install_deps(upgrade = "never")
## Run Project ----
targets::tar_make()
#' Project builder
## Install Dependencies (listed in DESCRIPTION) ----
remotes::install_deps(upgrade = "never")
## Run Project ----
targets::tar_make()
#' Project builder
## Install Dependencies (listed in DESCRIPTION) ----
remotes::install_deps(upgrade = "never")
## Run Project ----
targets::tar_make()
